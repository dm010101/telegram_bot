#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô TELEGRAM –ë–û–¢
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª

–§—É–Ω–∫—Ü–∏–∏:
- üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ)
- üíí –°–≤–∞–¥—å–±—ã (–≥–æ–¥–æ–≤—â–∏–Ω—ã)
- üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
- üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00
- üéØ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0"
"""

import asyncio
import json
import os
import random
from datetime import datetime
from pathlib import Path
from typing import Dict

import pytz
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackQueryHandler, MessageHandler, filters,
    ChatMemberHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class UniversalBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.timezone = pytz.timezone(os.getenv('TIMEZONE', 'Europe/Moscow'))
        
        # –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        self.birthdays_file = 'birthdays.json'
        self.weddings_file = 'weddings.json'
        self.messages_log_file = 'messages_log.json'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.admin_chats = set()
        self.alarm_enabled_chats = set()
        self.application = None
        self.scheduler_running = False
        
        # –ì—Ä—É–ø–ø–∞ "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0" –¥–ª—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.target_group_id = None
        self.target_group_name = "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0"
        
        # –õ–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.admin_user_id = 500922165
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        self.admin_username = "dmitru_pv"
        
        # –ö—ç—à –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self.bot_messages_cache = {}  # {chat_id: [message_ids...]}
        self.message_cache = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏–π
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
        self.congratulations = [
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéÇ",
            "üéä –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫–∏! üéà",
            "üéÅ –î–æ—Ä–æ–≥–æ–π {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚ú®",
            "üåü {name}, —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±—ã—Ç–∏—è! üéâ",
            "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üéä"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã
        self.wedding_congratulations = [
            "üíí –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {names} —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç –≤–º–µ—Å—Ç–µ - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–π –ª—é–±–≤–∏ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è! üíï",
            "üë∞ü§µ {names}, —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç —Å–µ–º–µ–π–Ω–æ–π –∂–∏–∑–Ω–∏ - —ç—Ç–æ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –õ—é–±–≤–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è! ü•Ç",
            "üíù –î–æ—Ä–æ–≥–∏–µ {names}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {years}-–ª–µ—Ç–∏–µ–º –≤–∞—à–µ–≥–æ –±—Ä–∞–∫–∞! –ü—É—Å—Ç—å –≤–∞—à–∞ –ª—é–±–æ–≤—å –±—É–¥–µ—Ç –∫—Ä–µ–ø–Ω—É—Ç—å —Å –∫–∞–∂–¥—ã–º –≥–æ–¥–æ–º! üåπ",
            "üéä {names}, —Å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π! {years} –ª–µ—Ç –Ω–∞–∑–∞–¥ –≤—ã —Å–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É '–î–∞', –∏ —ç—Ç–æ –±—ã–ª–æ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ! üíç",
            "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {names} —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç —Å—á–∞—Å—Ç—å—è –ø–æ–∑–∞–¥–∏, –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! üéâ"
        ]

    # === –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ===
    
    def load_birthdays(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.birthdays_file).exists():
                with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            return {}
    
    def save_birthdays(self, birthdays: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.birthdays_file, 'w', encoding='utf-8') as f:
                json.dump(birthdays, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
    
    def load_weddings(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç—ã —Å–≤–∞–¥–µ–± –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.weddings_file).exists():
                with open(self.weddings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å–≤–∞–¥–µ–±: {e}")
            return {}
    
    def save_weddings(self, weddings: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—ã —Å–≤–∞–¥–µ–± –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.weddings_file, 'w', encoding='utf-8') as f:
                json.dump(weddings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–≤–∞–¥–µ–±: {e}")

    def load_messages_log(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if Path(self.messages_log_file).exists():
                with open(self.messages_log_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}
    
    def save_messages_log(self, messages_log: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with open(self.messages_log_file, 'w', encoding='utf-8') as f:
                json.dump(messages_log, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0
        if await self.auto_setup_target_group(update, context):
            return
        
        welcome_text = """
üéâ **–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ë–û–¢ –î–õ–Ø –î–ù–ï–ô –†–û–ñ–î–ï–ù–ò–Ø –ò –°–í–ê–î–ï–ë**

üìÖ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è  
/today - –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è

üíí **–°–≤–∞–¥—å–±—ã:**
/add_wedding - –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã
/list_weddings - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–∞–¥—å–±—ã
/today_weddings - –ì–æ–¥–æ–≤—â–∏–Ω—ã —Å–µ–≥–æ–¥–Ω—è
/upcoming_weddings - –ë–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/enable_notifications - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**
/enable_alarm - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/disable_alarm - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/alarm_status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

/help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
        """
        
        await update.message.reply_text(welcome_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

üìÖ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add –ò–º—è –î–î.–ú–ú - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è  
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
/today - –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è

üíí **–°–≤–∞–¥—å–±—ã:**
/add_wedding "–ò–º—è1 –∏ –ò–º—è2" –î–î.–ú–ú.–ì–ì–ì–ì - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–∞–¥—å–±—É
/list_weddings - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–∞–¥—å–±—ã
/today_weddings - –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å–µ–≥–æ–¥–Ω—è
/upcoming_weddings - –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/enable_notifications - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**
/enable_alarm - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/disable_alarm - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/alarm_status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
/add –ú–∞—Ä–∏—è 25.12
/add_wedding "–ò–≤–∞–Ω –∏ –ê–Ω–Ω–∞" 15.06.2020

üóëÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞** (—Ç–æ–ª—å–∫–æ –¥–ª—è @dmitru_pv):
/delete_bot [N] - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
üìù –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–ø–ª–∞—é: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º "—É–¥–∞–ª–∏—Ç—å"
        """
        response = await update.message.reply_text(help_text)
        self.cache_bot_message(update.effective_chat.id, response.message_id)

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –ë–û–¢–ê ===
    
    def is_admin_user(self, user) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if not user:
            return False
        return user.username == self.admin_username
    
    def cache_bot_message(self, chat_id: int, message_id: int):
        """–ö—ç—à–∏—Ä—É–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        chat_id_str = str(chat_id)
        if chat_id_str not in self.bot_messages_cache:
            self.bot_messages_cache[chat_id_str] = []
        
        self.bot_messages_cache[chat_id_str].append(message_id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫—ç—à (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(self.bot_messages_cache[chat_id_str]) > 50:
            self.bot_messages_cache[chat_id_str] = self.bot_messages_cache[chat_id_str][-50:]

    async def delete_bot_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /delete_bot –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        if not self.is_admin_user(user):
            await update.message.reply_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞!\n"
                f"–¢–æ–ª—å–∫–æ @{self.admin_username} –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."
            )
            return
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        count = 1
        if context.args:
            try:
                count = int(context.args[0])
                if count < 1 or count > 20:
                    await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç 1 –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π!")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_bot [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
                return
        
        chat_id_str = str(chat_id)
        if chat_id_str not in self.bot_messages_cache or not self.bot_messages_cache[chat_id_str]:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        deleted_count = 0
        messages_to_delete = self.bot_messages_cache[chat_id_str][-count:]
        
        for message_id in reversed(messages_to_delete):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                self.bot_messages_cache[chat_id_str].remove(message_id)
                deleted_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                if message_id in self.bot_messages_cache[chat_id_str]:
                    self.bot_messages_cache[chat_id_str].remove(message_id)
        
        if deleted_count > 0:
            response = await update.message.reply_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏–∑ {count} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö!"
            )
            self.cache_bot_message(chat_id, response.message_id)
        else:
            response = await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!")
            self.cache_bot_message(chat_id, response.message_id)

    async def handle_reply_to_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –ø–æ —Ä–µ–ø–ª–∞—é"""
        if not update.message.reply_to_message:
            return
        
        user = update.effective_user
        chat_id = update.effective_chat.id
        replied_message = update.message.reply_to_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if not replied_message.from_user or not replied_message.from_user.is_bot:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.is_admin_user(user):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if update.message.text and update.message.text.lower() in ['/del', '/delete', '—É–¥–∞–ª–∏—Ç—å', 'delete']:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=replied_message.message_id)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                chat_id_str = str(chat_id)
                if chat_id_str in self.bot_messages_cache and replied_message.message_id in self.bot_messages_cache[chat_id_str]:
                    self.bot_messages_cache[chat_id_str].remove(replied_message.message_id)
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–æ!")
                self.cache_bot_message(chat_id, response.message_id)
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
                
            except Exception as e:
                response = await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                self.cache_bot_message(chat_id, response.message_id)

    async def auto_setup_target_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0 –∏ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
        chat = update.effective_chat
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0"
        if (chat.type in ['group', 'supergroup'] and 
            chat.title and 
            self.target_group_name.lower() in chat.title.lower()):
            
            chat_id = chat.id
            self.target_group_id = chat_id
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            self.admin_chats.add(chat_id)
            self.alarm_enabled_chats.add(chat_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
            birthdays = self.load_birthdays()
            weddings = self.load_weddings()
            
            chat_birthdays = birthdays.get(str(chat_id), {})
            chat_weddings = weddings.get(str(chat_id), {})
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = f"""
üéâ **–ê–í–¢–û–ù–ê–°–¢–†–û–ô–ö–ê –ì–†–£–ü–ü–´ "{chat.title}"**

‚úÖ **–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã:**

üéÇ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:** {len(chat_birthdays)} –∑–∞–ø–∏—Å–µ–π
üíí **–°–≤–∞–¥—å–±—ã:** {len(chat_weddings)} –∑–∞–ø–∏—Å–µ–π
üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ 00:00**
üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞**
üóëÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è @{self.admin_username}**

üì± **–ö–æ–º–∞–Ω–¥—ã:** /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            """
            
            try:
                await context.bot.send_message(chat_id=chat_id, text=welcome_message)
                print(f"üéØ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã '{chat.title}' (ID: {chat_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif (chat.type == 'private' and 
              user and 
              user.id == self.admin_user_id):
            
            chat_id = chat.id
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            self.admin_chats.add(chat_id)
            self.alarm_enabled_chats.add(chat_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
            birthdays = self.load_birthdays()
            weddings = self.load_weddings()
            
            chat_birthdays = birthdays.get(str(chat_id), {})
            chat_weddings = weddings.get(str(chat_id), {})
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = f"""
ü§ñ **–ê–í–¢–û–ù–ê–°–¢–†–û–ô–ö–ê –õ–ò–ß–ù–û–ì–û –ß–ê–¢–ê**

‚úÖ **–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã:**

üéÇ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:** {len(chat_birthdays)} –∑–∞–ø–∏—Å–µ–π
üíí **–°–≤–∞–¥—å–±—ã:** {len(chat_weddings)} –∑–∞–ø–∏—Å–µ–π
üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ 00:00**
üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞**
üóëÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ**

üì± **–ö–æ–º–∞–Ω–¥—ã:** /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            """
            
            try:
                await context.bot.send_message(chat_id=chat_id, text=welcome_message)
                print(f"üéØ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ (ID: {chat_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç: {e}")
            
            return True
        
        return False

    # === –î–ù–ò –†–û–ñ–î–ï–ù–ò–Ø ===
    
    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            response = await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –î–î.–ú–ú –∏–ª–∏ /add –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.03.1990"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        name = context.args[0]
        date_str = context.args[1]
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            if len(date_str.split('.')) == 2:
                day, month = date_str.split('.')
                year = None
            else:
                day, month, year = date_str.split('.')
                year = int(year)
            
            day, month = int(day), int(month)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if not (1 <= day <= 31 and 1 <= month <= 12):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            birthdays = self.load_birthdays()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in birthdays:
                birthdays[chat_id] = {}
            
            birthdays[chat_id][name] = {
                'day': day,
                'month': month,
                'year': year
            }
            
            self.save_birthdays(birthdays)
            
            age_info = f" ({datetime.now().year - year} –ª–µ—Ç)" if year else ""
            response = await update.message.reply_text(
                f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({day:02d}.{month:02d}{age_info}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            
        except ValueError:
            response = await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 15.03.1990"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)

    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays or not birthdays[chat_id]:
            response = await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        text = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        sorted_birthdays = sorted(
            birthdays[chat_id].items(),
            key=lambda x: (x[1]['month'], x[1]['day'])
        )
        
        for name, data in sorted_birthdays:
            day, month = data['day'], data['month']
            year = data.get('year')
            
            if year:
                age = datetime.now().year - year
                text += f"üéÇ {name} - {day:02d}.{month:02d}.{year} ({age} –ª–µ—Ç)\n"
            else:
                text += f"üéÇ {name} - {day:02d}.{month:02d}\n"
        
        response = await update.message.reply_text(text)
        self.cache_bot_message(update.effective_chat.id, response.message_id)

    async def today_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays:
            response = await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        today_celebrants = []
        for name, data in birthdays[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                today_celebrants.append(name)
        
        if today_celebrants:
            text = "üéâ **–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:**\n\n"
            for name in today_celebrants:
                congratulation = random.choice(self.congratulations).format(name=name)
                text += f"{congratulation}\n\n"
        else:
            text = "üìÖ –°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!"
        
        response = await update.message.reply_text(text)
        self.cache_bot_message(update.effective_chat.id, response.message_id)

    # === –°–í–ê–î–¨–ë–´ ===

    async def add_wedding(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add_wedding –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–≤–∞–¥—å–±—ã"""
        if not context.args or len(context.args) < 2:
            response = await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_wedding \"–ò–º—è1 –∏ –ò–º—è2\" –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: /add_wedding \"–ò–≤–∞–Ω –∏ –ê–Ω–Ω–∞\" 15.06.2020"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–¥–∞—Ç–∞)
        names = " ".join(context.args[:-1]).strip('"')
        date_str = context.args[-1]
        
        try:
            day, month, year = date_str.split('.')
            day, month, year = int(day), int(month), int(year)
            
            if not (1 <= day <= 31 and 1 <= month <= 12 and year >= 1900):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            weddings = self.load_weddings()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in weddings:
                weddings[chat_id] = {}
            
            weddings[chat_id][names] = {
                'day': day, 
                'month': month, 
                'year': year,
                'names': names
            }
            self.save_weddings(weddings)
            
            years_together = datetime.now().year - year
            response = await update.message.reply_text(
                f"üíí –°–≤–∞–¥—å–±–∞ {names} ({day:02d}.{month:02d}.{year}) –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üéä –í —ç—Ç–æ–º –≥–æ–¥—É: {years_together} –ª–µ—Ç –≤–º–µ—Å—Ç–µ!"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            
        except ValueError:
            response = await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.06.2020"
            )
            self.cache_bot_message(update.effective_chat.id, response.message_id)

    async def list_weddings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list_weddings –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å–≤–∞–¥–µ–±"""
        weddings = self.load_weddings()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in weddings or not weddings[chat_id]:
            response = await update.message.reply_text("üíí –°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–± –ø—É—Å—Ç!")
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        text = "üíí **–°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–±:**\n\n"
        sorted_weddings = sorted(weddings[chat_id].items(), key=lambda x: (x[1]['month'], x[1]['day']))
        
        for couple, data in sorted_weddings:
            day, month, year = data['day'], data['month'], data['year']
            years_together = datetime.now().year - year
            
            text += f"üë∞ü§µ {couple}\n"
            text += f"üìÖ –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã: {day:02d}.{month:02d}.{year}\n"
            text += f"üíï –í–º–µ—Å—Ç–µ: {years_together} –ª–µ—Ç\n\n"
        
        response = await update.message.reply_text(text)
        self.cache_bot_message(update.effective_chat.id, response.message_id)

    async def today_weddings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today_weddings –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–æ–≤—â–∏–Ω —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        weddings = self.load_weddings()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in weddings:
            response = await update.message.reply_text("üíí –°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–± –ø—É—Å—Ç!")
            self.cache_bot_message(update.effective_chat.id, response.message_id)
            return
        
        today_anniversaries = []
        for couple, data in weddings[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                years_together = today.year - data['year']
                today_anniversaries.append((couple, years_together))
        
        if today_anniversaries:
            text = "üíí **–°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã —É:**\n\n"
            for couple, years in today_anniversaries:
                congratulation = random.choice(self.wedding_congratulations).format(
                    names=couple, years=years
                )
                text += f"{congratulation}\n\n"
        else:
            text = "üíí –°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω –Ω–µ—Ç!"
        
        response = await update.message.reply_text(text)
        self.cache_bot_message(update.effective_chat.id, response.message_id)

    # === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===

    async def enable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /enable_notifications –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
        
        response = await update.message.reply_text(
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å)."
        )
        self.cache_bot_message(chat_id, response.message_id)

    async def enable_alarm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /enable_alarm –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.alarm_enabled_chats.add(chat_id)
        
        response = await update.message.reply_text(
            "üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞!**\n\n"
            "üìã **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**\n"
            "‚Ä¢ –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π\n" 
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alarm_status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        self.cache_bot_message(chat_id, response.message_id)

    async def disable_alarm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /disable_alarm –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.alarm_enabled_chats.discard(chat_id)
        
        response = await update.message.reply_text(
            "üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
        )
        self.cache_bot_message(chat_id, response.message_id)

    async def alarm_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /alarm_status –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        chat_id = update.effective_chat.id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        messages_log = self.load_messages_log()
        chat_stats = messages_log.get(str(chat_id), {})
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_messages = len(chat_stats.get('messages', []))
        edited_messages = len(chat_stats.get('edited', []))
        
        status_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê**\n\n"
        status_text += f"üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:** {'‚úÖ –í–ö–õ' if chat_id in self.alarm_enabled_chats else '‚ùå –í–´–ö–õ'}\n"
        status_text += f"üìù **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}\n"
        status_text += f"‚úèÔ∏è **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {edited_messages}\n"
        status_text += f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'‚úÖ –í–ö–õ' if chat_id in self.admin_chats else '‚ùå –í–´–ö–õ'}\n\n"
        
        if chat_id == self.target_group_id:
            status_text += f"üéØ **–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã '{self.target_group_name}': ‚úÖ –ê–ö–¢–ò–í–ù–ê**\n"
        
        status_text += f"üóëÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:** –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è @{self.admin_username}"
        
        response = await update.message.reply_text(status_text)
        self.cache_bot_message(chat_id, response.message_id)

    # === –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if not update.message:
            return
            
        chat_id = update.effective_chat.id
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
        if (chat_id == self.target_group_id or chat_id == self.admin_user_id):
            self.alarm_enabled_chats.add(chat_id)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if chat_id not in self.alarm_enabled_chats:
            return
        
        message = update.message
        user = message.from_user
        
        # –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤
        if user and user.is_bot:
            return
        
        username = f"@{user.username}" if user.username else user.first_name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = "üí¨ –¢–µ–∫—Å—Ç"
        message_text = message.text or ""
        
        if message.photo:
            content_type = "üì∑ –§–æ—Ç–æ"
            message_text = message.caption or ""
        elif message.video:
            content_type = "üé• –í–∏–¥–µ–æ"
            message_text = message.caption or ""
        elif message.document:
            content_type = "üìé –î–æ–∫—É–º–µ–Ω—Ç"
            message_text = message.caption or ""
        elif message.voice:
            content_type = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ"
        elif message.sticker:
            content_type = "üé≠ –°—Ç–∏–∫–µ—Ä"
        elif message.audio:
            content_type = "üéµ –ê—É–¥–∏–æ"
        elif message.location:
            content_type = "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
        elif message.contact:
            content_type = "üë§ –ö–æ–Ω—Ç–∞–∫—Ç"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏–π
        self.message_cache[message.message_id] = {
            'chat_id': chat_id,
            'user_id': user.id if user else None,
            'username': username,
            'timestamp': message.date.isoformat(),
            'text': message_text,
            'message_type': content_type
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages_log = self.load_messages_log()
        chat_id_str = str(chat_id)
        
        if chat_id_str not in messages_log:
            messages_log[chat_id_str] = {}
        
        messages_log[chat_id_str][str(message.message_id)] = {
            'message_id': message.message_id,
            'user_id': user.id if user else None,
            'username': user.username if user else None,
            'first_name': user.first_name if user else None,
            'date': message.date.isoformat(),
            'text': message_text,
            'content_type': content_type,
            'logged_at': datetime.now(self.timezone).isoformat()
        }
        
        self.save_messages_log(messages_log)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(self.message_cache) % 100 == 0:
            await self.check_deleted_messages(context)

    async def handle_edited_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.edited_message:
            return
            
        chat_id = update.effective_chat.id
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
        if (chat_id == self.target_group_id or chat_id == self.admin_user_id):
            self.alarm_enabled_chats.add(chat_id)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if chat_id not in self.alarm_enabled_chats:
            return
        
        edited_message = update.edited_message
        user = edited_message.from_user
        
        # –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–≤
        if user and user.is_bot:
            return
        
        username = f"@{user.username}" if user.username else user.first_name
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        messages_log = self.load_messages_log()
        chat_id_str = str(chat_id)
        
        if chat_id_str not in messages_log:
            messages_log[chat_id_str] = {}
        
        if 'edited' not in messages_log[chat_id_str]:
            messages_log[chat_id_str]['edited'] = []
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–∞
        original_text = ""
        message_id_str = str(edited_message.message_id)
        if message_id_str in messages_log[chat_id_str]:
            original_text = messages_log[chat_id_str][message_id_str].get('text', '')
        
        edit_data = {
            'message_id': edited_message.message_id,
            'user_id': user.id if user else None,
            'username': username,
            'edited_time': datetime.now(self.timezone).isoformat(),
            'original_text': original_text,
            'new_text': edited_message.text or edited_message.caption or ""
        }
        
        messages_log[chat_id_str]['edited'].append(edit_data)
        self.save_messages_log(messages_log)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if original_text != edit_data['new_text']:
            notification = f"‚úèÔ∏è **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ**\n\n"
            notification += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
            notification += f"üîó **ID —Å–æ–æ–±—â–µ–Ω–∏—è:** {edited_message.message_id}\n\n"
            notification += f"**–ë—ã–ª–æ:** {original_text[:100]}{'...' if len(original_text) > 100 else ''}\n\n"
            notification += f"**–°—Ç–∞–ª–æ:** {edit_data['new_text'][:100]}{'...' if len(edit_data['new_text']) > 100 else ''}"
            
            try:
                response = await context.bot.send_message(chat_id=chat_id, text=notification)
                self.cache_bot_message(chat_id, response.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    async def check_deleted_messages(self, context):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        current_time = datetime.now(self.timezone)
        messages_to_remove = []
        
        for message_id, msg_info in list(self.message_cache.items()):
            try:
                # –ü–∞—Ä—Å–∏–º timestamp
                message_time = datetime.fromisoformat(msg_info['timestamp'].replace('Z', '+00:00'))
                time_diff = (current_time - message_time).total_seconds()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç 2 –º–∏–Ω—É—Ç –¥–æ 10 –º–∏–Ω—É—Ç
                if 120 <= time_diff <= 600:
                    chat_id = msg_info['chat_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
                    if (chat_id not in self.alarm_enabled_chats and 
                        chat_id != self.target_group_id and 
                        chat_id != self.admin_user_id):
                        messages_to_remove.append(message_id)
                        continue
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.get_chat_member(chat_id=chat_id, user_id=context.bot.id)
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                        messages_to_remove.append(message_id)
                        continue
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                elif time_diff > 600:
                    messages_to_remove.append(message_id)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                messages_to_remove.append(message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
        for message_id in messages_to_remove:
            if message_id in self.message_cache:
                del self.message_cache[message_id]

    # === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω!")
        print("üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: –í–ö–õ")
        print("üíí –°–≤–∞–¥—å–±—ã: –í–ö–õ") 
        print("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: –í–ö–õ")
        print("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è @dmitru_pv")
        print("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00")
        print("üéØ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0': –í–ö–õ")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        self.application.add_handler(CommandHandler("add", self.add_birthday))
        self.application.add_handler(CommandHandler("list", self.list_birthdays))
        self.application.add_handler(CommandHandler("today", self.today_birthdays))
        
        # –°–≤–∞–¥—å–±—ã
        self.application.add_handler(CommandHandler("add_wedding", self.add_wedding))
        self.application.add_handler(CommandHandler("list_weddings", self.list_weddings))
        self.application.add_handler(CommandHandler("today_weddings", self.today_weddings))
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.application.add_handler(CommandHandler("enable_notifications", self.enable_notifications))
        self.application.add_handler(CommandHandler("enable_alarm", self.enable_alarm))
        self.application.add_handler(CommandHandler("disable_alarm", self.disable_alarm))
        self.application.add_handler(CommandHandler("alarm_status", self.alarm_status))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞
        self.application.add_handler(CommandHandler("delete_bot", self.delete_bot_messages))
        
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ü–ï–†–í–´–ú! –¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
        self.application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        from telegram.ext import BaseHandler
        
        class EditedMessageHandler(BaseHandler):
            def __init__(self, callback):
                super().__init__(callback)
                
            def check_update(self, update):
                return update.edited_message is not None
        
        self.application.add_handler(EditedMessageHandler(self.handle_edited_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–ø–ª–∞–µ–≤ (–ü–û–°–õ–ï–î–ù–ò–ú!)
        self.application.add_handler(MessageHandler(filters.TEXT & filters.REPLY, self.handle_reply_to_bot))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()

if __name__ == "__main__":
    bot = UniversalBot()
    bot.run() 