#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import os
import random
from datetime import datetime
from pathlib import Path
from typing import Dict

import pytz
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackQueryHandler, MessageHandler, filters,
    ChatMemberHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BirthdayBotWithAlarm:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.timezone = pytz.timezone(os.getenv('TIMEZONE', 'Europe/Moscow'))
        self.birthdays_file = 'birthdays.json'
        self.messages_log_file = 'messages_log.json'
        self.admin_chats = set()
        self.application = None
        self.scheduler_running = False
        self.alarm_enabled_chats = set()  # –ß–∞—Ç—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–ª–∞—Ä–º–æ–º
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
        self.congratulations = [
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéÇ",
            "üéä –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫–∏! üéà",
            "üéÅ –î–æ—Ä–æ–≥–æ–π {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚ú®",
            "üåü {name}, —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±—ã—Ç–∏—è! üéâ",
            "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üéä"
        ]
    
    def load_birthdays(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.birthdays_file).exists():
                with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            return {}
    
    def save_birthdays(self, birthdays: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.birthdays_file, 'w', encoding='utf-8') as f:
                json.dump(birthdays, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
    
    def load_messages_log(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if Path(self.messages_log_file).exists():
                with open(self.messages_log_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}
    
    def save_messages_log(self, messages_log: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with open(self.messages_log_file, 'w', encoding='utf-8') as f:
                json.dump(messages_log, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def get_message_type(self, message: Message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.voice:
            return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message.video_note:
            return "üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)"
        elif message.video:
            return "üìπ –í–∏–¥–µ–æ"
        elif message.audio:
            return "üéµ –ê—É–¥–∏–æ"
        elif message.photo:
            return "üì∑ –§–æ—Ç–æ"
        elif message.document:
            return "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
        elif message.sticker:
            return "üåü –°—Ç–∏–∫–µ—Ä"
        elif message.animation:
            return "üé¨ GIF"
        elif message.text:
            return "üí¨ –¢–µ–∫—Å—Ç"
        else:
            return "üìù –°–æ–æ–±—â–µ–Ω–∏–µ"
    
    def log_message(self, message: Message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if not message or not message.chat:
            return
            
        chat_id = str(message.chat.id)
        message_id = str(message.message_id)
        
        messages_log = self.load_messages_log()
        
        if chat_id not in messages_log:
            messages_log[chat_id] = {}
        
        message_data = {
            'message_id': message.message_id,
            'user_id': message.from_user.id if message.from_user else None,
            'username': message.from_user.username if message.from_user else None,
            'first_name': message.from_user.first_name if message.from_user else None,
            'date': message.date.isoformat() if message.date else None,
            'text': message.text[:100] if message.text else None,
            'content_type': self.get_message_type(message),
            'logged_at': datetime.now(self.timezone).isoformat()
        }
        
        messages_log[chat_id][message_id] = message_data
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç)
        if len(messages_log[chat_id]) > 1000:
            oldest_messages = sorted(messages_log[chat_id].items(), 
                                   key=lambda x: x[1].get('logged_at', ''))
            for old_msg_id, _ in oldest_messages[:-1000]:
                del messages_log[chat_id][old_msg_id]
        
        self.save_messages_log(messages_log)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üéâ –ü—Ä–∏–≤–µ—Ç! –Ø —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è  
/delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/today - –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
/upcoming - –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/enable_notifications - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–† –≤ 9:00

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**
/enable_alarm - –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
/disable_alarm - –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/alarm_status - –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ö†Ô∏è **–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π  
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        
        await update.message.reply_text(welcome_text)
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
    
    async def enable_alarm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        self.alarm_enabled_chats.add(chat_id)
        
        await update.message.reply_text(
            "üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞!**\n\n"
            "üìä **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**\n"
            "‚Ä¢ üí¨ –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üìπ –í–∏–¥–µ–æ –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã\n"
            "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ üë• –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "‚ö†Ô∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
            "‚Ä¢ –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alarm_status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
    
    async def disable_alarm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        self.alarm_enabled_chats.discard(chat_id)
        
        await update.message.reply_text(
            "üîï **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞!**\n\n"
            "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enable_alarm –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è"
        )
    
    async def alarm_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = str(update.effective_chat.id)
        
        if int(chat_id) not in self.alarm_enabled_chats:
            await update.message.reply_text(
                "üîï **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enable_alarm –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è"
            )
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        messages_log = self.load_messages_log()
        chat_messages = messages_log.get(chat_id, {})
        
        if not chat_messages:
            await update.message.reply_text(
                "üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞**\n\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ - –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_messages = len(chat_messages)
        message_types = {}
        users_activity = {}
        recent_activity = []
        
        for msg_data in chat_messages.values():
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            msg_type = msg_data.get('content_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message_types[msg_type] = message_types.get(msg_type, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            username = msg_data.get('username') or msg_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            users_activity[username] = users_activity.get(username, 0) + 1
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(recent_activity) < 5:
                recent_activity.append(msg_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        status_text = f"üõ°Ô∏è **–°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ù–ê**\n\n"
        status_text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        status_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        status_text += f"üïê –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(total_messages, 1000)} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        
        status_text += f"üìã **–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
        for msg_type, count in sorted(message_types.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_messages) * 100
            status_text += f"{msg_type}: {count} ({percentage:.1f}%)\n"
        
        status_text += f"\nüë• **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        for username, count in sorted(users_activity.items(), key=lambda x: x[1], reverse=True)[:5]:
            percentage = (count / total_messages) * 100
            username_display = username if username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            status_text += f"@{username_display}: {count} ({percentage:.1f}%)\n"
        
        await update.message.reply_text(status_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if update.message.from_user.is_bot:
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if chat_id in self.alarm_enabled_chats:
            self.log_message(update.message)
            
            # –û—Å–æ–±—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
            message_type = self.get_message_type(update.message)
            if message_type in ["üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)", "üìπ –í–∏–¥–µ–æ", "üéµ –ê—É–¥–∏–æ"]:
                user = update.message.from_user
                username = f"@{user.username}" if user.username else user.first_name
                
                alert_text = f"üì¢ **–ú–ï–î–ò–ê –°–û–û–ë–©–ï–ù–ò–ï**\n\n"
                alert_text += f"üë§ –û—Ç: {username}\n"
                alert_text += f"üìù –¢–∏–ø: {message_type}\n"
                alert_text += f"üïê –í—Ä–µ–º—è: {datetime.now(self.timezone).strftime('%H:%M:%S')}\n"
                alert_text += f"üìÑ ID: {update.message.message_id}"
                
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=alert_text,
                        reply_to_message_id=update.message.message_id
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ–¥–∏–∞: {e}")
    
    async def handle_edited_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.alarm_enabled_chats:
            return
        
        edited_message = update.edited_message
        if not edited_message or edited_message.from_user.is_bot:
            return
        
        user = edited_message.from_user
        username = f"@{user.username}" if user.username else user.first_name
        message_type = self.get_message_type(edited_message)
        
        alarm_text = f"‚ö†Ô∏è **–°–û–û–ë–©–ï–ù–ò–ï –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û**\n\n"
        alarm_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        alarm_text += f"üìù –¢–∏–ø: {message_type}\n"
        alarm_text += f"üïê –í—Ä–µ–º—è: {datetime.now(self.timezone).strftime('%H:%M:%S')}\n"
        alarm_text += f"üìÑ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {edited_message.message_id}\n"
        
        if edited_message.text:
            preview = edited_message.text[:50]
            alarm_text += f"üí¨ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {preview}{'...' if len(edited_message.text) > 50 else ''}"
        
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=alarm_text,
                reply_to_message_id=edited_message.message_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    async def handle_chat_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.alarm_enabled_chats:
            return
        
        chat_member_update = update.chat_member
        if not chat_member_update:
            return
        
        old_status = chat_member_update.old_chat_member.status
        new_status = chat_member_update.new_chat_member.status
        user = chat_member_update.new_chat_member.user
        
        if user.is_bot:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
            return
        
        username = f"@{user.username}" if user.username else user.first_name
        
        status_changes = {
            'left': '–ø–æ–∫–∏–Ω—É–ª —á–∞—Ç üëã',
            'kicked': '–∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ ‚ùå',
            'member': '–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ‚úÖ',
            'administrator': '—Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üëë',
            'creator': '—Å—Ç–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞ üèÜ'
        }
        
        if old_status != new_status and new_status in status_changes:
            alarm_text = f"üö® **–ò–ó–ú–ï–ù–ï–ù–ò–ï –í –ß–ê–¢–ï**\n\n"
            alarm_text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {username}\n"
            alarm_text += f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {status_changes[new_status]}\n"
            alarm_text += f"üïê –í—Ä–µ–º—è: {datetime.now(self.timezone).strftime('%H:%M:%S')}\n"
            alarm_text += f"üë• ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}"
            
            try:
                await context.bot.send_message(chat_id=chat_id, text=alarm_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –î–î.–ú–ú\n–ü—Ä–∏–º–µ—Ä: /add –ê–Ω–Ω–∞ 15.03"
            )
            return
        
        name = context.args[0]
        date_str = context.args[1]
        
        try:
            if len(date_str.split('.')) == 2:
                day, month = date_str.split('.')
                year = None
            else:
                day, month, year = date_str.split('.')
                year = int(year)
            
            day, month = int(day), int(month)
            
            if not (1 <= day <= 31 and 1 <= month <= 12):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            birthdays = self.load_birthdays()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in birthdays:
                birthdays[chat_id] = {}
            
            birthdays[chat_id][name] = {'day': day, 'month': month, 'year': year}
            self.save_birthdays(birthdays)
            
            age_info = f" ({datetime.now().year - year} –ª–µ—Ç)" if year else ""
            await update.message.reply_text(
                f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({day:02d}.{month:02d}{age_info}) –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
    
    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays or not birthdays[chat_id]:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        text = "üìÖ **–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:**\n\n"
        sorted_birthdays = sorted(birthdays[chat_id].items(), key=lambda x: (x[1]['month'], x[1]['day']))
        
        for name, data in sorted_birthdays:
            day, month = data['day'], data['month']
            year = data.get('year')
            
            if year:
                age = datetime.now().year - year
                text += f"üéÇ {name} - {day:02d}.{month:02d}.{year} ({age} –ª–µ—Ç)\n"
            else:
                text += f"üéÇ {name} - {day:02d}.{month:02d}\n"
        
        await update.message.reply_text(text)
    
    async def today_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        today_birthdays = []
        for name, data in birthdays[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                today_birthdays.append(name)
        
        if today_birthdays:
            text = "üéâ **–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:**\n\n"
            for name in today_birthdays:
                congratulation = random.choice(self.congratulations).format(name=name)
                text += f"{congratulation}\n\n"
        else:
            text = "üìÖ –°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!"
        
        await update.message.reply_text(text)
    
    async def enable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
        
        await update.message.reply_text(
            "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!**\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å)."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

üìÖ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add –ò–º—è –î–î.–ú–ú - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è  
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
/today - –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
/enable_notifications - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:**
/enable_alarm - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/disable_alarm - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/alarm_status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

‚ö†Ô∏è **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**
‚Ä¢ –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π  
‚Ä¢ –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        await update.message.reply_text(help_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.bot_token:
            print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        self.application = Application.builder().token(self.bot_token).build()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("add", self.add_birthday))
        self.application.add_handler(CommandHandler("list", self.list_birthdays))
        self.application.add_handler(CommandHandler("today", self.today_birthdays))
        self.application.add_handler(CommandHandler("enable_notifications", self.enable_notifications))
        
        # –ö–æ–º–∞–Ω–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.application.add_handler(CommandHandler("enable_alarm", self.enable_alarm))
        self.application.add_handler(CommandHandler("disable_alarm", self.disable_alarm))
        self.application.add_handler(CommandHandler("alarm_status", self.alarm_status))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE, self.handle_edited_message))
        self.application.add_handler(ChatMemberHandler(self.handle_chat_member))
        
        print("ü§ñ –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
        print("üõ°Ô∏è –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: /enable_alarm, /disable_alarm, /alarm_status")
        
        self.application.run_polling()

if __name__ == "__main__":
    bot = BirthdayBotWithAlarm()
    bot.run() 