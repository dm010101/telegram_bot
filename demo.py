#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from datetime import datetime
import random

def load_birthdays():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    with open('birthdays.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def demo_list_birthdays():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    print("üìÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
    print("=" * 50)
    
    birthdays = load_birthdays()
    chat_birthdays = birthdays.get("example_chat", {})
    
    if not chat_birthdays:
        print("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    sorted_birthdays = sorted(
        chat_birthdays.items(),
        key=lambda x: (x[1]['month'], x[1]['day'])
    )
    
    for name, data in sorted_birthdays:
        day, month = data['day'], data['month']
        print(f"üéÇ {name} - {day:02d}.{month:02d}")
    
    print(f"\n–í—Å–µ–≥–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤: {len(chat_birthdays)}")

def demo_upcoming_birthdays():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    print("\nüìÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
    print("=" * 50)
    
    today = datetime.now()
    birthdays = load_birthdays()
    chat_birthdays = birthdays.get("example_chat", {})
    
    upcoming = []
    for name, data in chat_birthdays.items():
        try:
            birthday_this_year = datetime(today.year, data['month'], data['day'])
            if birthday_this_year < today:
                birthday_this_year = datetime(today.year + 1, data['month'], data['day'])
            
            days_until = (birthday_this_year - today).days
            
            if 0 <= days_until <= 30:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
                upcoming.append((name, data, days_until, birthday_this_year))
        except ValueError:
            continue
    
    if not upcoming:
        print("üìÖ –í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")
        return
    
    upcoming.sort(key=lambda x: x[2])
    
    for name, data, days_until, birthday_date in upcoming:
        if days_until == 0:
            print(f"üéâ {name} - –°–ï–ì–û–î–ù–Ø!")
        elif days_until == 1:
            print(f"üéÇ {name} - –∑–∞–≤—Ç—Ä–∞ ({birthday_date.strftime('%d.%m')})")
        else:
            print(f"üéà {name} - —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π ({birthday_date.strftime('%d.%m')})")

def demo_today_birthdays():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è")
    print("=" * 50)
    
    today = datetime.now()
    birthdays = load_birthdays()
    chat_birthdays = birthdays.get("example_chat", {})
    
    today_birthdays = []
    for name, data in chat_birthdays.items():
        if data['day'] == today.day and data['month'] == today.month:
            today_birthdays.append(name)
    
    if today_birthdays:
        congratulations = [
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéÇ",
            "üéä –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫–∏! üéà",
            "üéÅ –î–æ—Ä–æ–≥–æ–π {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚ú®",
            "üåü {name}, —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±—ã—Ç–∏—è! üéâ",
            "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üéä"
        ]
        
        for name in today_birthdays:
            congratulation = random.choice(congratulations).format(name=name)
            print(f"{congratulation}\n")
    else:
        print(f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')}) –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")

def demo_month_statistics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
    print("=" * 50)
    
    months = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    birthdays = load_birthdays()
    chat_birthdays = birthdays.get("example_chat", {})
    
    month_count = {}
    for name, data in chat_birthdays.items():
        month = data['month']
        if month not in month_count:
            month_count[month] = []
        month_count[month].append(name)
    
    for month in sorted(month_count.keys()):
        names = month_count[month]
        print(f"{months[month]}: {len(names)} —á–µ–ª. - {', '.join(names)}")

if __name__ == "__main__":
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê –î–õ–Ø –î–ù–ï–ô –†–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        demo_list_birthdays()
        demo_upcoming_birthdays()
        demo_today_birthdays()
        demo_month_statistics()
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python start.py")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª birthdays.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}") 