#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import os
import random
from datetime import datetime
from pathlib import Path
from typing import Dict

import pytz
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackQueryHandler, MessageHandler, filters
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BirthdayBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.timezone = pytz.timezone(os.getenv('TIMEZONE', 'Europe/Moscow'))
        self.birthdays_file = 'birthdays.json'
        self.weddings_file = 'weddings.json'
        self.admin_chats = set()
        self.application = None
        self.scheduler_running = False
        
        # ID –≥—Ä—É–ø–ø—ã "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.target_group_id = None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.target_group_name = "–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0"
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        self.admin_username = "dmitru_pv"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å dmitru_pv –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        self.bot_messages_cache = {}  # {chat_id: [message_ids...]}
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
        self.congratulations = [
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéÇ",
            "üéä –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫–∏! üéà",
            "üéÅ –î–æ—Ä–æ–≥–æ–π {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚ú®",
            "üåü {name}, —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±—ã—Ç–∏—è! üéâ",
            "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üéä"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã
        self.wedding_congratulations = [
            "üíí –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {names} —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç –≤–º–µ—Å—Ç–µ - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–π –ª—é–±–≤–∏ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è! üíï",
            "üë∞ü§µ {names}, —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç —Å–µ–º–µ–π–Ω–æ–π –∂–∏–∑–Ω–∏ - —ç—Ç–æ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –õ—é–±–≤–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è! ü•Ç",
            "üíù –î–æ—Ä–æ–≥–∏–µ {names}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {years}-–ª–µ—Ç–∏–µ–º –≤–∞—à–µ–≥–æ –±—Ä–∞–∫–∞! –ü—É—Å—Ç—å –≤–∞—à–∞ –ª—é–±–æ–≤—å –±—É–¥–µ—Ç –∫—Ä–µ–ø–Ω—É—Ç—å —Å –∫–∞–∂–¥—ã–º –≥–æ–¥–æ–º! üåπ",
            "üéä {names}, —Å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π! {years} –ª–µ—Ç –Ω–∞–∑–∞–¥ –≤—ã —Å–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É '–î–∞', –∏ —ç—Ç–æ –±—ã–ª–æ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ! üíç",
            "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {names} —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! {years} –ª–µ—Ç —Å—á–∞—Å—Ç—å—è –ø–æ–∑–∞–¥–∏, –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! üéâ"
        ]
    
    def load_birthdays(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.birthdays_file).exists():
                with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            return {}
    
    def save_birthdays(self, birthdays: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.birthdays_file, 'w', encoding='utf-8') as f:
                json.dump(birthdays, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
    
    def load_weddings(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç—ã —Å–≤–∞–¥–µ–± –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.weddings_file).exists():
                with open(self.weddings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å–≤–∞–¥–µ–±: {e}")
            return {}
    
    def save_weddings(self, weddings: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—ã —Å–≤–∞–¥–µ–± –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.weddings_file, 'w', encoding='utf-8') as f:
                json.dump(weddings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–≤–∞–¥–µ–±: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0
        if await self.auto_setup_target_group(update, context):
            return
            
        welcome_text = """
üéâ **–ë–æ—Ç –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–≤–∞–¥–µ–±!**

üìã **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è  
/today - –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è

üíí **–°–≤–∞–¥—å–±—ã:**
/add_wedding - –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã
/list_weddings - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–∞–¥—å–±—ã
/today_weddings - –ì–æ–¥–æ–≤—â–∏–Ω—ã —Å–µ–≥–æ–¥–Ω—è
/upcoming_weddings - –ë–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/enable_notifications - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
/chatid - –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
        """
        
        await update.message.reply_text(welcome_text)
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
    
    async def auto_setup_target_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –ö—Ä–∞—Å–∞–≤—á–∏–∫–∏ 2.0"""
        chat = update.effective_chat
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–æ–π
        if (chat.type in ['group', 'supergroup'] and 
            chat.title and 
            self.target_group_name.lower() in chat.title.lower()):
            
            chat_id = chat.id
            self.target_group_id = chat_id
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            self.admin_chats.add(chat_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
            birthdays = self.load_birthdays()
            weddings = self.load_weddings()
            
            birthdays_count = sum(len(chat_birthdays) for chat_birthdays in birthdays.values())
            weddings_count = sum(len(chat_weddings) for chat_weddings in weddings.values())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            welcome_message = f"""
üéâ **–ê–í–¢–û–ù–ê–°–¢–†–û–ô–ö–ê –ì–†–£–ü–ü–´ "{chat.title}"**

‚úÖ **–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã:**

üéÇ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ 00:00
‚Ä¢ {birthdays_count} –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –≤ –±–∞–∑–µ
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /list, /today

üíí **–°–≤–∞–¥—å–±—ã:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ –≤ 00:00
‚Ä¢ {weddings_count} —Å–≤–∞–¥–µ–± —É–∂–µ –≤ –±–∞–∑–µ
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /list_weddings, /today_weddings, /upcoming_weddings

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É
‚Ä¢ –í—Ä–µ–º—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å)
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/list - –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
/list_weddings - —Å–≤–∞–¥—å–±—ã
            """
            
            try:
                await context.bot.send_message(chat_id=chat_id, text=welcome_message)
                print(f"üéØ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã '{chat.title}' (ID: {chat_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            
            return True
        
        return False
    
    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –î–î.–ú–ú\n–ü—Ä–∏–º–µ—Ä: /add –ê–Ω–Ω–∞ 15.03"
            )
            return
        
        name = context.args[0]
        date_str = context.args[1]
        
        try:
            if len(date_str.split('.')) == 2:
                day, month = date_str.split('.')
                year = None
            else:
                day, month, year = date_str.split('.')
                year = int(year)
            
            day, month = int(day), int(month)
            
            if not (1 <= day <= 31 and 1 <= month <= 12):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            birthdays = self.load_birthdays()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in birthdays:
                birthdays[chat_id] = {}
            
            birthdays[chat_id][name] = {'day': day, 'month': month, 'year': year}
            self.save_birthdays(birthdays)
            
            age_info = f" ({datetime.now().year - year} –ª–µ—Ç)" if year else ""
            await update.message.reply_text(
                f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({day:02d}.{month:02d}{age_info}) –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
    
    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays or not birthdays[chat_id]:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        text = "üìÖ **–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:**\n\n"
        sorted_birthdays = sorted(birthdays[chat_id].items(), key=lambda x: (x[1]['month'], x[1]['day']))
        
        for name, data in sorted_birthdays:
            day, month = data['day'], data['month']
            year = data.get('year')
            
            if year:
                age = datetime.now().year - year
                text += f"üéÇ {name} - {day:02d}.{month:02d}.{year} ({age} –ª–µ—Ç)\n"
            else:
                text += f"üéÇ {name} - {day:02d}.{month:02d}\n"
        
        await update.message.reply_text(text)
    
    async def today_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        today_birthdays = []
        for name, data in birthdays[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                today_birthdays.append(name)
        
        if today_birthdays:
            text = "üéâ **–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:**\n\n"
            for name in today_birthdays:
                congratulation = random.choice(self.congratulations).format(name=name)
                text += f"{congratulation}\n\n"
        else:
            text = "üìÖ –°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!"
        
        await update.message.reply_text(text)
    
    async def enable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
        
        await update.message.reply_text(
            "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!**\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å)."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

üìÖ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add –ò–º—è –î–î.–ú–ú - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è  
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
/today - –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è

üíí **–°–≤–∞–¥—å–±—ã:**
/add_wedding "–ò–º—è1 –∏ –ò–º—è2" –î–î.–ú–ú.–ì–ì–ì–ì - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–∞–¥—å–±—É
/list_weddings - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–∞–¥—å–±—ã
/today_weddings - –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å–µ–≥–æ–¥–Ω—è
/upcoming_weddings - –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/enable_notifications - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
/chatid - –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üóëÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞:**
–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

**–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:**
/add –ê–Ω–Ω–∞ 15.03
/add –ü–µ—Ç—Ä 22.05.1990

**–î–æ–±–∞–≤–∏—Ç—å —Å–≤–∞–¥—å–±—É:**
/add_wedding "–ò–≤–∞–Ω –∏ –ú–∞—Ä–∏—è" 15.06.2020
/add_wedding "–ü–µ—Ç—Ä –∏ –ê–Ω–Ω–∞" 10.08.2018

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
–í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /enable_notifications
        """
        
        await update.message.reply_text(help_text)
    
    async def show_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /chatid - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        chat_title = getattr(update.effective_chat, 'title', '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç')
        
        info_text = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
        info_text += f"üìä **ID —á–∞—Ç–∞:** `{chat_id}`\n"
        info_text += f"üìù **–¢–∏–ø —á–∞—Ç–∞:** {chat_type}\n"
        info_text += f"üë• **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_title}\n\n"
        info_text += f"üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID**"
        
        try:
            message = await update.message.reply_text(info_text)
            self.cache_bot_message(chat_id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
    
    def is_admin_user(self, user) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if not user:
            return False
        return user.username == self.admin_username
    
    def cache_bot_message(self, chat_id: int, message_id: int):
        """–ö—ç—à–∏—Ä—É–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        if chat_id not in self.bot_messages_cache:
            self.bot_messages_cache[chat_id] = []
        
        self.bot_messages_cache[chat_id].append(message_id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç)
        if len(self.bot_messages_cache[chat_id]) > 100:
            self.bot_messages_cache[chat_id] = self.bot_messages_cache[chat_id][-100:]
    
    async def send_cached_message(self, chat_id: int, text: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –µ–≥–æ ID"""
        try:
            if self.application and self.application.bot:
                message = await self.application.bot.send_message(chat_id=chat_id, text=text, **kwargs)
                self.cache_bot_message(chat_id, message.message_id)
                return message
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def delete_bot_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /delete_bot –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
        if not self.is_admin_user(update.effective_user):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        
        chat_id = update.effective_chat.id
        
        if chat_id not in self.bot_messages_cache or not self.bot_messages_cache[chat_id]:
            await update.message.reply_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return
        
        deleted_count = 0
        failed_count = 0
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        for message_id in self.bot_messages_cache[chat_id][:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                deleted_count += 1
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.bot_messages_cache[chat_id].remove(message_id)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ API
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫—ç—à–∞
                if "message to delete not found" in str(e).lower():
                    if message_id in self.bot_messages_cache[chat_id]:
                        self.bot_messages_cache[chat_id].remove(message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = f"üóëÔ∏è **–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        result_text += f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n"
        if failed_count > 0:
            result_text += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {failed_count}\n"
        result_text += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤ –∫—ç—à–µ: {len(self.bot_messages_cache.get(chat_id, []))}"
        
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å
        try:
            message = await update.message.reply_text(result_text)
            self.cache_bot_message(chat_id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def handle_reply_to_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–ø–ª–∞–µ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message.reply_to_message:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.is_admin_user(update.effective_user):
            return
        
        replied_message = update.message.reply_to_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        if replied_message.from_user.id != context.bot.id:
            return
        
        chat_id = update.effective_chat.id
        message_id_to_delete = replied_message.message_id
        user_message_id = update.message.message_id
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id_to_delete)
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.delete_message(chat_id=chat_id, message_id=user_message_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∫—ç—à–∞
            if chat_id in self.bot_messages_cache and message_id_to_delete in self.bot_messages_cache[chat_id]:
                self.bot_messages_cache[chat_id].remove(message_id_to_delete)
            
            print(f"üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {message_id_to_delete} –≤ —á–∞—Ç–µ {chat_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–µ–ø–ª–∞—é: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)[:100]}"
                )
                # –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                self.cache_bot_message(chat_id, error_message.message_id)
            except:
                pass
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö"""
        today = datetime.now(self.timezone)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        birthdays = self.load_birthdays()
        weddings = self.load_weddings()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        target_chats = list(self.admin_chats)
        
        for chat_id in target_chats:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            chat_birthdays = birthdays.get(str(chat_id), {})
            today_celebrants = []
            for name, data in chat_birthdays.items():
                if data['day'] == today.day and data['month'] == today.month:
                    today_celebrants.append(name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            if today_celebrants:
                for name in today_celebrants:
                    congratulation = random.choice(self.congratulations).format(name=name)
                    try:
                        await self.send_cached_message(
                            chat_id,
                            f"üéâ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n{congratulation}"
                        )
                        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–† –≤ —á–∞—Ç {chat_id}: {e}")
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                        if chat_id in self.admin_chats:
                            self.admin_chats.discard(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å–≤–∞–¥–µ–±  
            chat_weddings = weddings.get(str(chat_id), {})
            today_anniversaries = []
            for couple, data in chat_weddings.items():
                if data['day'] == today.day and data['month'] == today.month:
                    years_together = today.year - data['year']
                    today_anniversaries.append((couple, years_together))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏
            if today_anniversaries:
                for couple, years in today_anniversaries:
                    congratulation = random.choice(self.wedding_congratulations).format(
                        names=couple, years=years
                    )
                    try:
                        await self.send_cached_message(
                            chat_id,
                            f"üíí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ —Å–≤–∞–¥—å–±—ã!\n\n{congratulation}"
                        )
                        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ –≤ —á–∞—Ç {chat_id}: {e}")
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                        if chat_id in self.admin_chats:
                            self.admin_chats.discard(chat_id)
    
    async def notification_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        last_notification_check = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        while self.scheduler_running:
            try:
                now = datetime.now(self.timezone)
                current_timestamp = now.timestamp()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 00:00 (–ø–æ–ª–Ω–æ—á—å) –∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
                if now.hour == 0 and now.minute == 0 and (current_timestamp - last_notification_check) > 60:
                    print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–æ–ª–Ω–æ—á—å: {now.strftime('%H:%M:%S')}")
                    await self.check_and_send_notifications()
                    last_notification_check = current_timestamp
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(30)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(30)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.scheduler_running:
            self.scheduler_running = True
            import threading
            scheduler_thread = threading.Thread(target=self.run_scheduler)
            scheduler_thread.daemon = True
            scheduler_thread.start()
            print("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (00:00)")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        import asyncio
        asyncio.run(self.notification_scheduler())
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.bot_token:
            print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Application
        from telegram.ext import ApplicationBuilder
        
        builder = ApplicationBuilder()
        builder.token(self.bot_token)
        self.application = builder.build()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("add", self.add_birthday))
        self.application.add_handler(CommandHandler("list", self.list_birthdays))
        self.application.add_handler(CommandHandler("today", self.today_birthdays))
        self.application.add_handler(CommandHandler("enable_notifications", self.enable_notifications))
        self.application.add_handler(CommandHandler("chatid", self.show_chat_id))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–≤–∞–¥–µ–±
        self.application.add_handler(CommandHandler("add_wedding", self.add_wedding))
        self.application.add_handler(CommandHandler("list_weddings", self.list_weddings))
        self.application.add_handler(CommandHandler("today_weddings", self.today_weddings))
        self.application.add_handler(CommandHandler("upcoming_weddings", self.upcoming_weddings))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        self.application.add_handler(CommandHandler("delete_bot", self.delete_bot_messages))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–ø–ª–∞–µ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
        self.application.add_handler(MessageHandler(filters.REPLY & filters.TEXT, self.handle_reply_to_bot))
        
        print("ü§ñ –ë–æ—Ç –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–≤–∞–¥–µ–± –∑–∞–ø—É—â–µ–Ω!")
        print("üïõ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00")
        print("üíí –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–∞–¥–µ–±: –í–ö–õ")
        print(f"üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è @{self.admin_username}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.start_scheduler()
        
        self.application.run_polling()

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–∞–¥—å–±–∞–º–∏
    async def add_wedding(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add_wedding –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–≤–∞–¥—å–±—ã"""
        if not context.args or len(context.args) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_wedding \"–ò–º—è1 –∏ –ò–º—è2\" –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: /add_wedding \"–ò–≤–∞–Ω –∏ –ú–∞—Ä–∏—è\" 15.06.2020"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–¥–∞—Ç—ã)
        names = " ".join(context.args[:-1]).strip('"').strip("'")
        date_str = context.args[-1]
        
        try:
            day, month, year = date_str.split('.')
            day, month, year = int(day), int(month), int(year)
            
            if not (1 <= day <= 31 and 1 <= month <= 12 and year >= 1900):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            weddings = self.load_weddings()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in weddings:
                weddings[chat_id] = {}
            
            weddings[chat_id][names] = {
                'day': day, 
                'month': month, 
                'year': year,
                'names': names
            }
            self.save_weddings(weddings)
            
            years_together = datetime.now().year - year
            await update.message.reply_text(
                f"üíí –°–≤–∞–¥—å–±–∞ {names} ({day:02d}.{month:02d}.{year}) –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üéä –í —ç—Ç–æ–º –≥–æ–¥—É: {years_together} –ª–µ—Ç –≤–º–µ—Å—Ç–µ!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.06.2020"
            )

    async def list_weddings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list_weddings –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å–≤–∞–¥–µ–±"""
        weddings = self.load_weddings()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in weddings or not weddings[chat_id]:
            await update.message.reply_text("üíí –°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–± –ø—É—Å—Ç!")
            return
        
        text = "üíí **–°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–±:**\n\n"
        sorted_weddings = sorted(weddings[chat_id].items(), key=lambda x: (x[1]['month'], x[1]['day']))
        
        for couple, data in sorted_weddings:
            day, month, year = data['day'], data['month'], data['year']
            years_together = datetime.now().year - year
            
            text += f"üë∞ü§µ {couple}\n"
            text += f"üìÖ –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã: {day:02d}.{month:02d}.{year}\n"
            text += f"üíï –í–º–µ—Å—Ç–µ: {years_together} –ª–µ—Ç\n\n"
        
        await update.message.reply_text(text)

    async def today_weddings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today_weddings –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–æ–≤—â–∏–Ω —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        weddings = self.load_weddings()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in weddings:
            await update.message.reply_text("üíí –°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–± –ø—É—Å—Ç!")
            return
        
        today_anniversaries = []
        for couple, data in weddings[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                years_together = today.year - data['year']
                today_anniversaries.append((couple, years_together))
        
        if today_anniversaries:
            text = "üíí **–°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã —É:**\n\n"
            for couple, years in today_anniversaries:
                congratulation = random.choice(self.wedding_congratulations).format(
                    names=couple, years=years
                )
                text += f"{congratulation}\n\n"
        else:
            text = "üíí –°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω –Ω–µ—Ç!"
        
        await update.message.reply_text(text)

    async def upcoming_weddings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /upcoming_weddings –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω"""
        today = datetime.now(self.timezone)
        weddings = self.load_weddings()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in weddings or not weddings[chat_id]:
            await update.message.reply_text("üíí –°–ø–∏—Å–æ–∫ —Å–≤–∞–¥–µ–± –ø—É—Å—Ç!")
            return
        
        upcoming = []
        
        for couple, data in weddings[chat_id].items():
            day, month, year = data['day'], data['month'], data['year']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≥–æ–¥–æ–≤—â–∏–Ω—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É
            try:
                anniversary_this_year = datetime(today.year, month, day, tzinfo=self.timezone)
                
                # –ï—Å–ª–∏ –≥–æ–¥–æ–≤—â–∏–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if anniversary_this_year < today:
                    anniversary_this_year = datetime(today.year + 1, month, day, tzinfo=self.timezone)
                
                days_until = (anniversary_this_year.date() - today.date()).days
                years_together = anniversary_this_year.year - year
                
                upcoming.append((couple, anniversary_this_year, days_until, years_together))
                
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
        
        if not upcoming:
            await update.message.reply_text("üíí –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω!")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
        upcoming.sort(key=lambda x: x[2])
        
        text = "üíí **–ë–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å–≤–∞–¥–µ–±:**\n\n"
        for couple, anniversary_date, days_until, years_together in upcoming[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10
            if days_until == 0:
                text += f"üéä **–°–ï–ì–û–î–ù–Ø:** {couple} - {years_together} –ª–µ—Ç!\n"
            elif days_until == 1:
                text += f"üîî **–ó–ê–í–¢–†–ê:** {couple} - {years_together} –ª–µ—Ç!\n"
            else:
                text += f"üìÖ –ß–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π: {couple} - {years_together} –ª–µ—Ç\n"
            
            text += f"   üìÜ {anniversary_date.strftime('%d.%m.%Y')}\n\n"
        
        await update.message.reply_text(text)

if __name__ == "__main__":
    bot = BirthdayBot()
    bot.run() 