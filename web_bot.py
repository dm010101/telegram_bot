#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import os
import random
import threading
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List

import pytz
import schedule
import time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackQueryHandler, MessageHandler, filters
)

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ.get('BOT_TOKEN') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"TIMEZONE: {os.environ.get('TIMEZONE', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
print(f"WEBHOOK_URL: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ.get('WEBHOOK_URL') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"PORT: {os.environ.get('PORT', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('.env'):
    try:
        with open('.env', 'w') as f:
            f.write(f"BOT_TOKEN={os.environ.get('BOT_TOKEN', '')}\n")
            f.write(f"TIMEZONE={os.environ.get('TIMEZONE', 'Europe/Moscow')}\n")
            f.write(f"WEBHOOK_URL={os.environ.get('WEBHOOK_URL', '')}\n")
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ .env: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BirthdayBot:
    def __init__(self):
        self.bot_token = os.environ.get('BOT_TOKEN') or os.getenv('BOT_TOKEN')
        self.timezone = pytz.timezone(os.environ.get('TIMEZONE') or os.getenv('TIMEZONE', 'Europe/Moscow'))
        self.birthdays_file = 'birthdays.json'
        self.admin_chats = set()  # –ß–∞—Ç—ã –≥–¥–µ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.webhook_url = os.environ.get('WEBHOOK_URL') or os.getenv('WEBHOOK_URL')
        self.port = int(os.environ.get('PORT') or os.getenv('PORT', 10000))
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
        self.congratulations = [
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéÇ",
            "üéä –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫–∏! üéà",
            "üéÅ –î–æ—Ä–æ–≥–æ–π {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚ú®",
            "üåü {name}, —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±—ã—Ç–∏—è! üéâ",
            "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üéä"
        ]
    
    def load_birthdays(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.birthdays_file).exists():
                with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.save_birthdays({})
            return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            return {}
    
    def save_birthdays(self, birthdays: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.birthdays_file, 'w', encoding='utf-8') as f:
                json.dump(birthdays, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
/delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/today - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
/upcoming - –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞ –Ω–µ–¥–µ–ª—é)
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

üîî –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enable_notifications
        """
        
        await update.message.reply_text(welcome_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üî∏ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
   –§–æ—Ä–º–∞—Ç: /add –ò–≤–∞–Ω 15.03 –∏–ª–∏ /add –ò–≤–∞–Ω 15.03.1990

üî∏ /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤

üî∏ /delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
   –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å

üî∏ /today - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è

üî∏ /upcoming - –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è

üî∏ /enable_notifications - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üìù –ü—Ä–∏–º–µ—Ä—ã:
/add –ú–∞—Ä–∏—è 25.12
/add –ü–µ—Ç—Ä 08.07.1985
        """
        await update.message.reply_text(help_text)
    
    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –î–î.–ú–ú –∏–ª–∏ /add –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.03.1990"
            )
            return
        
        name = context.args[0]
        date_str = context.args[1]
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            if len(date_str.split('.')) == 2:
                day, month = date_str.split('.')
                year = None
            else:
                day, month, year = date_str.split('.')
                year = int(year)
            
            day, month = int(day), int(month)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if not (1 <= day <= 31 and 1 <= month <= 12):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            birthdays = self.load_birthdays()
            chat_id = str(update.effective_chat.id)
            
            if chat_id not in birthdays:
                birthdays[chat_id] = {}
            
            birthdays[chat_id][name] = {
                'day': day,
                'month': month,
                'year': year
            }
            
            self.save_birthdays(birthdays)
            
            age_info = f" ({datetime.now().year - year} –ª–µ—Ç)" if year else ""
            await update.message.reply_text(
                f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({day:02d}.{month:02d}{age_info}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 15.03.1990"
            )
    
    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays or not birthdays[chat_id]:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        text = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        sorted_birthdays = sorted(
            birthdays[chat_id].items(),
            key=lambda x: (x[1]['month'], x[1]['day'])
        )
        
        for name, data in sorted_birthdays:
            day, month = data['day'], data['month']
            year = data.get('year')
            
            if year:
                age = datetime.now().year - year
                text += f"üéÇ {name} - {day:02d}.{month:02d}.{year} ({age} –ª–µ—Ç)\n"
            else:
                text += f"üéÇ {name} - {day:02d}.{month:02d}\n"
        
        await update.message.reply_text(text)
    
    async def delete_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays or not birthdays[chat_id]:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏
        keyboard = []
        for name in birthdays[chat_id].keys():
            keyboard.append([InlineKeyboardButton(f"‚ùå {name}", callback_data=f"delete_{name}")])
        
        keyboard.append([InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=reply_markup
        )
    
    async def today_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        today_birthdays = []
        for name, data in birthdays[chat_id].items():
            if data['day'] == today.day and data['month'] == today.month:
                today_birthdays.append(name)
        
        if today_birthdays:
            text = "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n\n"
            for name in today_birthdays:
                congratulation = random.choice(self.congratulations).format(name=name)
                text += f"{congratulation}\n\n"
        else:
            text = "üìÖ –°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!"
        
        await update.message.reply_text(text)
    
    async def upcoming_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /upcoming –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        chat_id = str(update.effective_chat.id)
        
        if chat_id not in birthdays:
            await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç!")
            return
        
        upcoming = []
        for name, data in birthdays[chat_id].items():
            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
            try:
                birthday_this_year = datetime(today.year, data['month'], data['day'])
                if birthday_this_year < today:
                    # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                    birthday_this_year = datetime(today.year + 1, data['month'], data['day'])
                
                days_until = (birthday_this_year - today).days
                
                if 0 <= days_until <= 7:
                    upcoming.append((name, data, days_until, birthday_this_year))
            except ValueError:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π 29 —Ñ–µ–≤—Ä–∞–ª—è
                continue
        
        if not upcoming:
            await update.message.reply_text("üìÖ –í –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")
            return
        
        upcoming.sort(key=lambda x: x[2])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        
        text = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞ –Ω–µ–¥–µ–ª—é):\n\n"
        for name, data, days_until, birthday_date in upcoming:
            if days_until == 0:
                text += f"üéâ {name} - –°–ï–ì–û–î–ù–Ø!\n"
            elif days_until == 1:
                text += f"üéÇ {name} - –∑–∞–≤—Ç—Ä–∞ ({birthday_date.strftime('%d.%m')})\n"
            else:
                text += f"üéà {name} - —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π ({birthday_date.strftime('%d.%m')})\n"
        
        await update.message.reply_text(text)
    
    async def enable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.admin_chats.add(chat_id)
        
        await update.message.reply_text(
            "üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ø–æ–ª–Ω–æ—á—å)."
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        if query.data.startswith("delete_"):
            name = query.data[7:]  # –£–±–∏—Ä–∞–µ–º "delete_"
            
            birthdays = self.load_birthdays()
            chat_id = str(update.effective_chat.id)
            
            if chat_id in birthdays and name in birthdays[chat_id]:
                del birthdays[chat_id][name]
                self.save_birthdays(birthdays)
                await query.edit_message_text(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} —É–¥–∞–ª–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not self.admin_chats:
            return
        
        today = datetime.now(self.timezone)
        birthdays = self.load_birthdays()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        from telegram import Bot
        bot = Bot(token=self.bot_token)
        
        for chat_id in self.admin_chats:
            chat_birthdays = birthdays.get(str(chat_id), {})
            
            today_celebrants = []
            for name, data in chat_birthdays.items():
                if data['day'] == today.day and data['month'] == today.month:
                    today_celebrants.append(name)
            
            if today_celebrants:
                for name in today_celebrants:
                    congratulation = random.choice(self.congratulations).format(name=name)
                    try:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"üéâ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n{congratulation}",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
    
    def schedule_notifications(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        schedule.every().day.at("00:00").do(
            lambda: asyncio.run(self.check_and_send_notifications())
        )
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def start_scheduler_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        scheduler_thread = threading.Thread(target=self.run_scheduler, daemon=True)
        scheduler_thread.start()
    
    async def run_webhook(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–µ–±-—Ö—É–∫–æ–≤"""
        if not self.bot_token:
            print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
            print("BOT_TOKEN=your_bot_token_here")
            return
        
        if not self.webhook_url:
            print("‚ùå –û—à–∏–±–∫–∞: WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            print("–î–æ–±–∞–≤—å—Ç–µ WEBHOOK_URL –≤ —Ñ–∞–π–ª .env –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render:")
            print("WEBHOOK_URL=https://your-app-name.onrender.com")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Application.builder()
        from telegram import Bot
        from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler
        from aiohttp import web
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=self.bot_token)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Ö—É–∫–∞
        webhook_path = "telegram"
        webhook_url = f"{self.webhook_url}/{webhook_path}"
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Ö—É–∫–∞: {webhook_url}")
        print(f"üîÑ –ü–æ—Ä—Ç: {self.port}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤—Ä—É—á–Ω—É—é
        dispatcher = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler("start", self.start))
        dispatcher.add_handler(CommandHandler("help", self.help_command))
        dispatcher.add_handler(CommandHandler("add", self.add_birthday))
        dispatcher.add_handler(CommandHandler("list", self.list_birthdays))
        dispatcher.add_handler(CommandHandler("delete", self.delete_birthday))
        dispatcher.add_handler(CommandHandler("today", self.today_birthdays))
        dispatcher.add_handler(CommandHandler("upcoming", self.upcoming_birthdays))
        dispatcher.add_handler(CommandHandler("enable_notifications", self.enable_notifications))
        dispatcher.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.schedule_notifications()
        self.start_scheduler_thread()
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ö—É–∫–∞
        print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–µ–±-—Ö—É–∫–µ: {webhook_url}")
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /add, /list, /delete, /today, /upcoming, /help")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫
        await bot.set_webhook(url=webhook_url)
        
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        port = int(os.environ.get("PORT", self.port))
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-—Ö—É–∫–æ–≤
        async def webhook_handler(request):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            update_data = await request.json()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ JSON
            from telegram import Update
            update = Update.de_json(data=update_data, bot=bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            await dispatcher.process_update(update)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.Response()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        app.router.add_post(f"/{webhook_path}", webhook_handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        async def health_check(request):
            return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        app.router.add_get("/", health_check)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", port)
        
        try:
            await site.start()
            print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            await runner.cleanup()

if __name__ == "__main__":
    bot = BirthdayBot()
    asyncio.run(bot.run_webhook()) 